== use ==

# This script generates random graphs and produces plots of the graph
python generate_graph.py
# Note: the parameters for the graph are currently hardcoded
python generate_graphViz_plot.py

# not currently working:
python fitness_function_all_to_all_hops.py
python fitness_function_bisection_bandwidth.py
python fitness_function_AtoB_hops.py
python make_permutations_to_graph.py

== required software ==

Python
GraphViz

Tested on Ubuntu 12.04 64bit

== background ==

The question motivating this project is
"What is the topology of the network which results in the lowest transmission times for an all-to-all communication?"

The parameters are
-number of switches
-number of compute nodes
-number of ports per switch
-number of ports per compute node
Future parameters might be
-physical layout (3D racks and isles of racks)
-message size
-fault tolarance

Obviously a "fully-connected" (each node connects directly to every other node) is optimal, but given fewer ports than the number of nodes this is not possible.

Second-most optimal would be introducing one switch with n ports for n compute nodes. Then each node can communicate to any other node via one hop. However, when n=1,000,000 the switch is not available for purchase. Also, the single switch is a single point of failure.

Thus the optimal network topology depends on real-world factors such as switches available for purchase (should we buy a lots of 24 port switches, or more 1000 port switches), and how many ports should the compute node support?


== other resources ==

http://gavinmhackeling.com/blog/2012/10/simulated-annealing-in-python/

http://codecapsule.com/2010/04/06/simulated-annealing-traveling-salesman/

Parallel Simulated Annealing in Python
http://code.google.com/p/parsap/

http://margaretmorgan.com/wesley/python/
http://margaretmorgan.com/wesley/python/anneal.py


Python implementation of algorithms from Russell and Norvig's Artificial Intelligence: A Modern Approach. 
http://code.google.com/p/aima-python/
http://aima-python.googlecode.com/svn/trunk/search.py
